
.. currentmodule:: gxp.plugins

:class:`gxp.plugins.FeatureEditor`
================================================================================


.. cssclass:: meta


Extends
    * `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_
    
    * :class:`gxp.plugins.ClickableFeatures`
    * :class:`gxp.plugins.Tool`





ptype
    ``gxp_featureeditor``



.. class:: FeatureEditor(config)

  Plugin for feature editing. Requires a
  :class:`gxp.plugins.FeatureManager`.


    


Config Options
--------------

Configuration properties in addition to
those listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: actions

    ``Array`` Custom actions for tools that do not provide their own. Array
    elements are expected to be valid Ext config objects. Actions provided
    here may have an additional ``menuText`` property, which will be used
    as text when the action is used in a menu. The ``text`` property will
    only be used in buttons. Optional, only needed to create custom
    actions.

.. describe:: actionTarget

    ``Object`` or ``String`` or ``Array`` Where to place the tool's actions
    (e.g. buttons or menus)?
    
    In case of a string, this can be any string that references an
    ``Ext.Container`` property on the portal, or a unique id configured on a
    component.
    
    In case of an object, the object has a "target" and an "index" property,
    so that the tool can be inserted at a specified index in the target.
    
    actionTarget can also be an array of strings or objects, if the action is
    to be put in more than one place (e.g. a button and a context menu item).
    
    To reference one of the toolbars of an ``Ext.Panel``, ".tbar", ".bbar" or
    ".fbar" has to be appended. The default is "map.tbar". The viewer's main
    MapPanel can always be accessed with "map" as actionTarget. Set to null if
    no actions should be created.
    
    Some tools provide a context menu. To reference this context menu as
    actionTarget for other tools, configure an id in the tool's
    outputConfig, and use the id with ".contextMenu" appended. In the
    snippet below, a layer tree is created, with a "Remove layer" action
    as button on the tree's top toolbar, and as menu item in its context
    menu:
    
    .. code-block:: javascript
    
       {
           xtype: "gxp_layertree",
           outputConfig: {
               id: "tree",
               tbar: []
           }
       }, {
           xtype: "gxp_removelayer",
           actionTarget: ["tree.tbar", "tree.contextMenu"]
       }
    
    If a tool has both actions and output, and you want to force it to
    immediately output to a container, set actionTarget to null. If you
    want to hide the actions, set actionTarget to false. In this case, you
    should configure a defaultAction to make sure that an action is active.

.. describe:: autoActivate

    ``Boolean`` Set to false if the tool should be initialized without
    activating it. Default is true.

.. describe:: autoLoadFeatures

    ``Boolean`` Should this tool load features on click? If set to true,
    and if there is no loaded feature at the click position, this tool will
    call loadFeatures on the ``featureManager``, with a ``FeatureId``
    filter created from the id of a feature returned from a WMS
    GetFeatureInfo request at the click position. This feature will then be
    selected immediately. Default is false.

.. describe:: controlOptions

    ``Object`` If this tool is associated with an ``OpenLayers.Control``
    then this is an optional object to pass to the constructor of the
    associated ``OpenLayers.Control``.

.. describe:: createFeatureActionText

    ``String``
    Create new feature text.

.. describe:: createFeatureActionTip

    ``String``
    Tooltip string for create new feature action (i18n).

.. describe:: defaultAction

    ``Number`` Optional index of an action that should be active by
    default. Only works for actions that are a ``GeoExt.Action`` instance.

.. describe:: editFeatureActionText

    ``String``
    Modify feature text.

.. describe:: editFeatureActionTip

    ``String``
    Tooltip string for edit existing feature action (i18n).

.. describe:: excludeFields

    ``Array`` Optional list of field names (case sensitive) that are to be
    excluded from the property grid of the FeatureEditPopup.

.. describe:: featureManager

    ``String`` The id of the :class:`gxp.plugins.FeatureManager` to use
    with this tool.

.. describe:: fields

    ``Array``
    List of field config names corresponding to feature attributes.  If
    not provided, fields will be derived from attributes. If provided,
    the field order from this list will be used, and fields missing in the
    list will be excluded.

.. describe:: iconClsAdd

    ``String``
    iconCls to use for the add button.

.. describe:: iconClsEdit

    ``String``
    iconCls to use for the edit button.

.. describe:: modifyOnly

    ``Boolean`` Set to true to use the FeatureEditor merely as a feature
    modify tool, i.e. there is no option to add new features.

.. describe:: outputAction

    ``Number`` The ``actions`` array index of the action that should
    trigger this tool's output. Only valid if ``actions`` is configured.
    Leave this unconfigured if none of the ``actions`` should trigger this
    tool's output.

.. describe:: outputConfig

    ``Object`` Optional configuration for the output container. This may
    be useful to override the xtype (e.g. "window" instead of "gx_popup"),
    or to provide layout configurations when rendering to an
    ``outputTarget``.

.. describe:: outputTarget

    ``String`` By default, the FeatureEditPopup will be added to the map.

.. describe:: readOnly

    ``Boolean`` Set to true to use the FeatureEditor merely as a feature
    info tool, without editing capabilities. Default is false.

.. describe:: showSelectedOnly

    ``Boolean`` If set to true, only selected features will be displayed
    on the layer. If set to false, all features (on the current page) will
    be. Default is true.

.. describe:: snappingAgent

    ``String`` Optional id of the :class:`gxp.plugins.SnappingAgent` to use
    with this tool.

.. describe:: toggleGroup

    ``String`` If this tool should be radio-button style toggled with other
    tools, this string is to identify the toggle group.

.. describe:: tolerance

    ``Number``
    Optional pixel tolerance to use when selecting features.  By default,
    the server decides whether a pixel click intersects a feature based on
    its own rules.  If a pixel tolerance is provided, it will be included in
    requests for features to inform the server to look in a buffer around
    features.




Public Properties
-----------------

Public properties in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. attribute:: FeatureEditor.active

    ``Boolean`` Is the tool currently active?




Public Methods
--------------

Public methods in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. method:: FeatureEditor.activate

    :returns: ``Boolean`` true when this tool was activated
    
    Activates this tool.

.. method:: FeatureEditor.addActions

    

.. method:: FeatureEditor.addOutput

    

.. method:: FeatureEditor.deactivate

    :returns: ``Boolean`` true when this tool was deactivated
    
    Deactivates this tool.

.. method:: FeatureEditor.removeOutput

    Removes all output created by this tool

.. method:: FeatureEditor.select

    :arg feature: ``OpenLayers.Feature.Vector``
    
    Action to perform when a feature is selected. The default action is to
    unselect existing selections and select the feature using the built-in
    SelectFeature control. To be overridden by subclasses.




Events
------

Events in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: activate

    Fired when the tool is activated.
    
    Listener arguments:
    * tool - :class:`gxp.plugins.Tool` the activated tool

.. describe:: deactivate

    Fired when the tool is deactivated.
    
    Listener arguments:
    * tool - :class:`gxp.plugins.Tool` the deactivated tool



