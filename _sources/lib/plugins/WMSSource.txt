
.. currentmodule:: gxp.plugins

:class:`gxp.plugins.WMSSource`
================================================================================


.. cssclass:: meta


Extends
    * `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_
    * :class:`gxp.plugins.LayerSource`





ptype
    ``gx_wmssource``



.. class:: WMSSource(config)

  Plugin for using WMS layers with :class:`gxp.Viewer` instances. The
  plugin issues a GetCapabilities request to create a store of the WMS's
  layers.



Example Use
-----------

Configuration in the  :class:`gxp.Viewer`:

.. code-block:: javascript

  defaultSourceType: "gx_wmssource",
  sources: {
      "opengeo": {
          url: "http://suite.opengeo.org/geoserver/wms"
      }
  }

A typical configuration for a layer from this source (in the ``layers``
array of the viewer's ``map`` config option would look like this:

.. code-block:: javascript

  {
      source: "opengeo",
      name: "world",
      group: "background"
  }


    


Config Options
--------------

Configuration properties in addition to
those listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: url

    ``String`` WMS service URL for this source

.. describe:: version

    ``String``
    If specified, the version string will be included in WMS GetCapabilities
    requests.  By default, no version is set.




Public Properties
-----------------

Public properties in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. attribute:: WMSSource.store

    ``GeoExt.data.LayerStore``

.. attribute:: WMSSource.title

    ``String``
    A descriptive title for this layer source.




Public Methods
--------------

Public methods in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. method:: WMSSource.createLayerRecord

    :arg config:  ``Object``  The application config for this layer.
    :returns: ``GeoExt.data.LayerRecord``
    
    Create a layer record given the config.

.. method:: WMSSource.createStore

    Creates a store of layer records.  Fires "ready" when store is loaded.

.. method:: WMSSource.describeLayer

    :arg rec: ``GeoExt.data.LayerRecord`` the layer to issue a WMS
        DescribeLayer request for
    :arg callback: ``Function`` Callback function. Will be called with
        an ``Ext.data.Record`` from a ``GeoExt.data.DescribeLayerStore``
        as first argument, or false if the WMS does not support
        DescribeLayer.
    :arg scope: ``Object`` Optional scope for the callback.
    
    Get a DescribeLayer response from this source's WMS.

.. method:: WMSSource.getConfigForRecord

    :arg record: :class:`GeoExt.data.LayerRecord`
    :returns: ``Object``
    
    Create a config object that can be used to recreate the given record.

.. method:: WMSSource.getProjection

    :arg layerRecord: ``GeoExt.data.LayerRecord`` a record from this
        source's store
    :returns: ``OpenLayers.Projection`` A suitable projection for the
        ``layerRecord``. If the layer is available in the map projection,
        the map projection will be returned. Otherwise an equal projection,
        or null if none is available.
    
    Get the projection that the source will use for the layer created in
    ``createLayerRecord``. If the layer is not available in a projection
    that fits the map projection, null will be returned.

.. method:: WMSSource.getSchema

    :arg rec: ``GeoExt.data.LayerRecord`` the WMS layer to issue a WFS
        DescribeFeatureType request for
    :arg callback: ``Function`` Callback function. Will be called with
        a ``GeoExt.data.AttributeStore`` containing the schema as first
        argument, or false if the WMS does not support DescribeLayer or the
        layer is not associated with a WFS feature type.
    :arg scope: ``Object`` Optional scope for the callback.
    
    Gets the schema for a layer of this source, if the layer is a feature
    layer.

.. method:: WMSSource.init

    :arg target: ``Object`` The object initializing this plugin.
    
    Calls :meth:`createStore` with a callback that fires the 'ready' event.




Events
------

Events in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: failure

    Fires if the layer source fails to load.

.. describe:: ready

    Fires when the layer source is ready for action.



