
.. currentmodule:: gxp.plugins

:class:`gxp.plugins.OSMSource`
================================================================================


.. cssclass:: meta


Extends
    * `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_
    * :class:`gxp.plugins.LayerSource`





ptype
    ``gx_osmsource``



.. class:: OSMSource(config)

  Plugin for using OpenStreetMap layers with :class:`gxp.Viewer` instances.

  Available layer names are "mapnik" and "osmarender"



Example Use
-----------

The configuration in the ``sources`` property of the :class:`gxp.Viewer` is
straightforward:

.. code-block:: javascript

  "osm": {
      ptype: "gx_osmsource"
  }

A typical configuration for a layer from this source (in the ``layers``
array of the viewer's ``map`` config option would look like this:

.. code-block:: javascript

  {
      source: "osm",
      name: "osmarander"
  }


    


Config Options
--------------

Configuration properties in addition to
those listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: homeAttribution

    ``String``
    Attribution string for osmarender generated layer (i18n).

.. describe:: osmAttribution

    ``String``
    Attribution string for mapnik generated layer (i18n).

.. describe:: title

    ``String``
    A descriptive title for this layer source (i18n).




Public Properties
-----------------

Public properties in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. attribute:: OSMSource.store

    ``GeoExt.data.LayerStore``. Will contain records with "mapnik" and
    "osmarender" as name field values.

.. attribute:: OSMSource.title

    ``String``
    A descriptive title for this layer source.




Public Methods
--------------

Public methods in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. method:: OSMSource.createLayerRecord

    :arg config:  ``Object``  The application config for this layer.
    :returns: ``GeoExt.data.LayerRecord``
    
    Create a layer record given the config.

.. method:: OSMSource.createStore

    Creates a store of layer records.  Fires "ready" when store is loaded.

.. method:: OSMSource.getConfigForRecord

    :arg record: :class:`GeoExt.data.LayerRecord`
    :returns: ``Object``
    
    Create a config object that can be used to recreate the given record.

.. method:: OSMSource.getProjection

    :arg layerRecord: ``GeoExt.data.LayerRecord`` a record from this
        source's store
    :returns: ``OpenLayers.Projection`` A suitable projection for the
        ``layerRecord``. If the layer is available in the map projection,
        the map projection will be returned. Otherwise an equal projection,
        or null if none is available.
    
    Get the projection that the source will use for the layer created in
    ``createLayerRecord``. If the layer is not available in a projection
    that fits the map projection, null will be returned.

.. method:: OSMSource.init

    :arg target: ``Object`` The object initializing this plugin.
    
    Calls :meth:`createStore` with a callback that fires the 'ready' event.




Events
------

Events in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: failure

    Fires if the layer source fails to load.

.. describe:: ready

    Fires when the layer source is ready for action.



