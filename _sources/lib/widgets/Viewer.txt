
.. currentmodule:: gxp

:class:`gxp.Viewer`
================================================================================


.. cssclass:: meta


Extends
    * `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_
    







.. class:: Viewer(config)

  A map viewer application framework that can be extended with plugins
  for layer sources and tools. Types of viewers that can be built with
  this framework range from simple map viewers to complex web-based GIS
  applications with capabilities like feature editing, styling and more.



Example Use
-----------

A viewer can be added to an HTML page with a script block containing
something like this for a minimal viewer with an OSM layer:

.. code-block:: javascript

  var app = new gxp.Viewer({
      sources: {
          osm: {
              ptype: "gx_osmsource"
          }
      },
      map: {
          center: [0, 0],
          zoom: 2,
          layers: [{
              source: "osm",
              name: "mapnik"
          }]
      }
  });

    


Config Options
--------------

Configuration properties in addition to
those listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: defaultSourceType

    ``String``
    The default layer source plugin type.

.. describe:: defaultToolType

    ``String``
    The default tool plugin type. Default is "gx_tool"

.. describe:: field

    :class:`gxp.form.ViewerField` Optional - set by
    :class:`gxp.form.ViewerField` so plugins like
    :class:`gxp.plugins.FeatureToField` can set the form field's value.

.. describe:: map

    ``Object`` Map configuration for this viewer. This object is similar
    to the ``GeoExt.MapPanel`` configuration, with the following
    exceptions:
    
    * center: ``Array`` of lon (x) and lat (y) values
    * items: not available - use ``mapItems`` instead
    * tbar: not available - use :class:`gxp.Tool` plugins to populate
      the tbar
    * layers: ``Array(Object)``. Each object has a ``source`` property
      referencing a :class:`gxp.plugins.LayerSource`. The viewer will call
      the ``createLayerRecord`` of this source with the object as
      argument, which will result in a layer being created with the
      configuration provided here.
    
      Valid config options for all layer sources:
    
      * source: ``String`` referencing a source from ``sources``
      * name: ``String`` - the name from the source's ``store`` (only for
        sources that maintain a store)
      * visibility: ``Boolean`` - initial layer visibility
      * opacity: ``Number`` - initial layer.opacity
      * group: ``String`` - group for the layer when the viewer also uses a
        :class:`gxp.plugins.LayerTree`. Set this to "background" to make
        the layer a base layer
      * fixed: ``Boolean`` - Set to true to prevent the layer from being
        removed by a :class:`gxp.plugins.RemoveLayer` tool and from being
        dragged in a :class:`gxp.plugins.LayerTree`
      * selected: ``Boolean`` - Set to true to mark the layer selected
    * map: not available, can be configured with ``maxExtent``,
      ``numZoomLevels`` and ``theme``.
    * restrictedExtent: ``Array`` to be consumed by
      ``OpenLayers.Bounds.fromArray`` - the restrictedExtent of the map
    * maxExtent: ``Array`` to be consumed by
      ``OpenLayers.Bounds.fromArray`` - the maxExtent of the map
    * numZoomLevels: ``Number`` - the number of zoom levels if not
      available on the first layer
    * theme: ``String`` - optional theme for the ``OpenLayers.Map``, as
      in ``OpenLayers.Map.theme``.

.. describe:: mapItems

    ``Array(Ext.Component)``
    Any items to be added to the map panel. A typical item to put on a map
    would be a ``GeoExt.ZoomSlider``.

.. describe:: portalConfig

    ``Object`` Configuration object for the wrapping container of the
    viewer. This will be an ``Ext.Panel`` if it has a ``renderTo``
    property, or an ``Ext.Viewport`` otherwise.

.. describe:: portalItems

    ``Array`` Items for the portal. A MapPanel will automatically be added
    to the portal, unless ``portalConfig`` has ``items`` configured.

.. describe:: sources

    ``Object`` Layer source configurations for this viewer, keyed by source
    id. The source id will be used to reference the layer source in the
    ``layers`` array of the ``map`` object.

.. describe:: tools

    ``Array(`` :class:`gxp.plugins.Tool` ``)``
    Any tools to be added to the viewer. Tools are plugins that will be
    plugged into this viewer's ``portal``. The ``tools`` array is usually
    populated with configuration objects for plugins (using a ptype),
    rather than instances. A default ptype can be configured with this
    viewer's ``defaultToolType`` option.




Public Properties
-----------------

Public properties in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. attribute:: Viewer.field

    :class:`gxp.form.ViewerField` Used by plugins to access the form field.
    Only available if this viewer is wrapped into an
    :class:`Ext.form.ViewerField`.

.. attribute:: Viewer.portalItems

    ``Array(Ext.Component)``
    Items that make up the portal.

.. attribute:: Viewer.selectedLayer

    ``GeoExt.data.LayerRecord`` The currently selected layer

.. attribute:: Viewer.tools

    ``Object`` Storage of tool instances for this viewer, keyed by id




Public Methods
--------------

Public methods in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. method:: Viewer.createLayerRecord

    :arg config: ``Object`` A minimal layer configuration object with source
        and name properties.
    :arg callback: ``Function`` A function to be called with the layer
        record that corresponds to the given config.
    
    Asyncronously retrieves a layer record given a basic layer config.  The
    callback will be called as soon as the desired layer source is ready.
    This method should only be called to retrieve layer records from sources
    configured before the call.

.. method:: Viewer.getLayerRecordFromMap

    :arg config: ``Object`` A minimal layer configuration object with source
        and name properties.
    
    Retrieves a layer record from the map.

.. method:: Viewer.getSource

    :arg layerRec: ``GeoExt.data.LayerRecord`` the layer to get the
        source for.

.. method:: Viewer.loadConfig

    :arg config: ``Object`` The config object passed to the constructor.
    
    Subclasses that load config asynchronously can override this to load
    any configuration before applyConfig is called.

.. method:: Viewer.selectLayer

    :arg record: ``GeoExt.data.LayerRecord``` Layer record.  Call with no
        layer record to remove layer selection.
    :returns: ``Boolean`` Layers were set as selected.
    
    TODO: change to selectLayers (plural)




Events
------

Events in addition to those
listed for `Ext.util.Observable <http://extjs.com/deploy/dev/docs/?class=Ext.util.Observable>`_.


.. describe:: beforelayerselectionchange

    Fired before the selected set of layers changes.  Listeners
    can return ``false`` to stop the selected layers from being
    changed.
    
    Listeners arguments:
    
    * layerRecord - ``GeoExt.data.LayerRecord`` the record of the
      selected layer, or null if no layer is selected.

.. describe:: layerselectionchange

    Fired when the selected set of layers changes.
    
    Listeners arguments:
    
    * layerRecord - ``GeoExt.data.LayerRecord`` the record of the
      selected layer, or null if no layer is selected.

.. describe:: portalready

    Fires after the portal is initialized.

.. describe:: ready

    Fires when application is ready for user interaction.



